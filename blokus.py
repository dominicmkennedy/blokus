import numpy as np

empty_board = np.zeros((20, 20))

red_corners = [(0, 0)]
blu_corners = [(0, -1)]
grn_corners = [(-1, 0)]
ylw_corners = [(-1, -1)]

polyomino = list[tuple[int, int]]


def flip_poly():
    pass


# https://i.ebayimg.com/images/g/cj8AAOSwdXhekQcT/s-l1200.jpg
polyominos: list[polyomino] = [
    [(0, 0)],  # 1
    [(0, 0), (0, 1)],  # 2
    [(0, 0), (0, 1), (0, 2)],  # 3
    [(0, 0), (0, 1), (1, 0)],  # 4
    [(0, 0), (0, 1), (0, 2), (0, 3)],  # 5
    [(0, 0), (1, 0), (1, 1), (1, 2)],  # 6
    [(0, 0), (0, 1), (1, 1), (0, 2)],  # 7
    [(0, 0), (0, 1), (1, 0), (1, 1)],  # 8
    [(0, 1), (1, 1), (1, 0), (2, 0)],  # 9
    [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4)],  # 10
    [(0, 0), (1, 0), (1, 1), (1, 2), (1, 3)],  # 11
    [(0, 0), (0, 1), (1, 1), (1, 2), (1, 3)],  # 12
    [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2)],  # 13
    [(0, 0), (1, 0), (1, 1), (1, 2), (0, 2)],  # 14
    [(0, 0), (0, 1), (0, 2), (1, 2), (0, 3)],  # 15
    [(0, 0), (1, 0), (2, 0), (1, 1), (1, 2)],  # 16
    [(0, 0), (0, 1), (0, 2), (1, 0), (2, 0)],  # 17
    [(0, 2), (1, 2), (1, 1), (2, 1), (2, 0)],  # 18
    [(0, 1), (0, 2), (1, 1), (2, 1), (2, 0)],  # 19
    [(0, 1), (0, 2), (1, 1), (1, 0), (2, 1)],  # 20
    [(0, 1), (1, 1), (1, 0), (1, 2), (2, 1)],  # 21
]


def max_poly_dim(p: polyomino) -> tuple[int, int]:
    mx = max(p, key=lambda x: x[0])
    my = max(p, key=lambda x: x[1])

    return (mx[0], my[1])
